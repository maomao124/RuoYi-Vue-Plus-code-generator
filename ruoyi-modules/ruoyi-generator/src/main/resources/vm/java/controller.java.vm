package ${packageName}.controller;

import java.util.List;
import cn.hutool.core.bean.BeanUtil;

import lombok.RequiredArgsConstructor;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import cn.dev33.satoken.annotation.SaCheckPermission;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.validation.annotation.Validated;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import ${basePackageName}.common.idempotent.annotation.RepeatSubmit;
import ${basePackageName}.common.core.exception.ServiceException;
import ${basePackageName}.common.log.annotation.Log;
import ${basePackageName}.common.web.core.BaseController;
import ${basePackageName}.common.mybatis.core.page.PageQuery;
import ${basePackageName}.common.core.domain.R;
import ${basePackageName}.common.core.validate.AddGroup;
import ${basePackageName}.common.core.validate.EditGroup;
import ${basePackageName}.common.log.enums.BusinessType;
import ${basePackageName}.common.excel.utils.ExcelUtil;
import ${packageName}.entity.${ClassName};
import ${packageName}.domain.vo.${ClassName}Vo;
import ${packageName}.domain.vo.${ClassName}ExportVo;
import ${packageName}.domain.bo.${ClassName}Bo;
import ${packageName}.domain.bo.${ClassName}DeleteBo;
import ${packageName}.service.I${ClassName}Service;
#if($table.crud)
import ${basePackageName}.common.mybatis.core.page.TableDataInfo;
#elseif($table.tree)
#end

/**
 * ${functionName}
 *
 * @author ${author}
 * @since ${datetime}
 */
@Validated
@RequiredArgsConstructor
@RestController
@RefreshScope
@Tag(name = "${functionName}")
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController
{

    private final I${ClassName}Service ${className}Service;

    #set($greeting = "${")
    @Value("${greeting}controller.${ClassName}Controller.enable:true}")
    private boolean enable = true;

    @Value("${greeting}controller.${ClassName}Controller.updateEnable:true}")
    private boolean updateEnable = true;

    /**
     * 分页查询${functionName}列表
     */
    @SaCheckPermission("${permissionPrefix}:list")
    @PostMapping("/page")
#if($table.crud)
    @Operation(summary = "分页查询${functionName}列表")
    public TableDataInfo<${ClassName}Vo> list(@Validated @RequestBody ${ClassName}Bo bo, PageQuery pageQuery) {
    if (!enable) {
        throw new ServiceException("${functionName}功能已关闭");
    }
        return ${className}Service.queryPageList(bo, pageQuery);
    }
#elseif($table.tree)
    public R<List<${ClassName}Vo>> list(${ClassName}Bo bo) {
        if (!enable) {
            throw new ServiceException("${functionName}功能已关闭");
        }
        List<${ClassName}Vo> list = ${className}Service.queryList(bo);
        return R.ok(list);
    }
#end

    /**
     * 导出${functionName}列表
     */
    @SaCheckPermission("${permissionPrefix}:export")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    @Operation(summary = "导出${functionName}列表")
    public void export(@Validated @RequestBody ${ClassName}Bo bo, HttpServletResponse response) {
        if (!enable) {
            throw new ServiceException("${functionName}功能已关闭");
        }
        List<${ClassName}> ${className}List = ${className}Service.queryEntityList(bo);
        List<${ClassName}ExportVo> list = BeanUtil.copyToList(${className}List,
            ${ClassName}ExportVo.class);
        ExcelUtil.exportExcel(list, "${functionName}", ${ClassName}ExportVo.class, response);
    }

    /**
     * 获取${functionName}详细信息
     *
     * @param ${pkColumn.javaField} 主键
     */
    @SaCheckPermission("${permissionPrefix}:query")
    @GetMapping("/{${pkColumn.javaField}}")
    @Operation(summary = "获取${functionName}详细信息")
    public R<${ClassName}Vo> getInfo(@NotNull(message = "主键不能为空")
                                     @PathVariable ${pkColumn.javaType} ${pkColumn.javaField}) {
        if (!enable) {
            return R.fail("${functionName}功能已关闭");
        }
        return R.ok(${className}Service.queryById(${pkColumn.javaField}));
    }

    /**
     * 新增${functionName}
     */
    @SaCheckPermission("${permissionPrefix}:add")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @RepeatSubmit()
    @PostMapping()
    @Operation(summary = "新增${functionName}")
    public R<Boolean> add(@Validated(AddGroup.class) @RequestBody ${ClassName}Bo bo) {
        if (!enable) {
            return R.fail("${functionName}功能已关闭");
        }
        if (!updateEnable) {
            return R.fail("${functionName}更新功能已关闭");
        }
        return R.ok(${className}Service.insertByBo(bo));
    }

    /**
     * 修改${functionName}
     */
    @SaCheckPermission("${permissionPrefix}:edit")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @RepeatSubmit()
    @PutMapping()
    @Operation(summary = "修改${functionName}")
    public R<Boolean> edit(@Validated(EditGroup.class) @RequestBody ${ClassName}Bo bo) {
        if (!enable) {
            return R.fail("${functionName}功能已关闭");
        }
        if (!updateEnable) {
            return R.fail("${functionName}更新功能已关闭");
        }
        return R.ok(${className}Service.updateByBo(bo));
    }

    /**
     * 批量删除${functionName}-通过路径数组的方式
     *
     * @param ${pkColumn.javaField}s 主键串
     */
    @SaCheckPermission("${permissionPrefix}:remove")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @DeleteMapping("/batch/array/{${pkColumn.javaField}s}")
    @Operation(summary = "批量删除${functionName}-通过路径数组的方式")
    public R<Boolean> remove(@NotEmpty(message = "主键不能为空")
                          @PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s) {
        if (!enable) {
            return R.fail("${functionName}功能已关闭");
        }
        if (!updateEnable) {
            return R.fail("${functionName}更新功能已关闭");
        }
        return R.ok(${className}Service.deleteWithValidByIds(List.of(${pkColumn.javaField}s), true));
    }

    /**
     * 根据ID删除${functionName}
     *
     * @param ${pkColumn.javaField} 主键
     */
    @SaCheckPermission("${permissionPrefix}:remove")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @DeleteMapping("/{${pkColumn.javaField}}")
    @Operation(summary = "根据ID删除${functionName}")
    public R<Boolean> remove(@NotNull(message = "主键不能为空")
                                 @PathVariable ${pkColumn.javaType} ${pkColumn.javaField}) {
        if (!enable) {
            return R.fail("${functionName}功能已关闭");
        }
        if (!updateEnable) {
            return R.fail("${functionName}更新功能已关闭");
        }
        return R.ok(${className}Service.deleteWithValidByIds(List.of(${pkColumn.javaField}), true));
    }

    /**
     * 批量删除${functionName}-通过请求体的方式
     *
     * @param ${className}DeleteBo ${ClassName}DeleteBo
     */
    @SaCheckPermission("${permissionPrefix}:remove")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @DeleteMapping("/batch")
    @Operation(summary = "批量删除${functionName}-通过请求体的方式")
    public R<Boolean> remove(@RequestBody @Validated(EditGroup.class)
                                     ${ClassName}DeleteBo ${className}DeleteBo) {
        if (!enable) {
            return R.fail("${functionName}功能已关闭");
        }
        if (!updateEnable) {
            return R.fail("${functionName}更新功能已关闭");
        }
        return R.ok(${className}Service.deleteWithValidByIds(${className}DeleteBo.getIds(), true));
    }
}
